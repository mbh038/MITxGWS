library(GO.db)
con = GO.db$conn
dbGetQuery(con, "select count(*) from go_term")
dbGetQuery(GO.db$conn, "select term from go_term")
keys(GO.db, keytype="TERM")
library(microbenchmark)
m1 = microbenchmark(
dbGetQuery(GO.db$conn, "select term from go_term"), times=10L, unit="ms")
m2 = microbenchmark(
keys(GO.db, keytype="TERM"), times=10L, unit="ms")
biocLite("microbenchmark")
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("microbenchmark")
library(microbenchmark)
m1 = microbenchmark(
dbGetQuery(GO.db$conn, "select term from go_term"), times=10L, unit="ms")
m2 = microbenchmark(
keys(GO.db, keytype="TERM"), times=10L, unit="ms")
m1
m1$median
str(m1)
summary(m1)
m1[5]
m1[5,2]
median(m1$time)
median(m2$time)/median(m1$time)
summary(m2)[,"median"]/summary(m1)[,"median"]
library(RNAseqData.HNRNPC.bam.chr14)
library(GenomicAlignments)
library(ERBS)
data(GM12878)
seqlevels(GM12878, force=TRUE) = "chr14"
library(Rsamtools)
parm = ScanBamParam(which=GM12878)
tab = summarizeOverlaps( GM12878, RNAseqData.HNRNPC.bam.chr14_BAMFILES,
param=parm)
tab
sum(tab)
str(tab)
ranges(tab)
ranges(tab)[1:51]
summary(tab)
width(tab)
?summarizeOverlaps
parm
queryHits(tab)
RNAseqData.HNRNPC.bam.chr14_BAMFILES
parm
summary(parm)
ranges(parm)
tab
tab[,1]
colData(tab)
tab$ERR127306
tab[,2]
sum(tab[,2])
tab
str(tab)
score(tab)
seqnames(tab)
assays(tab)
assays(tab)[[1]]
assays(tab)[[1]][1,]
regions=1:51
regions
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
zeros
sum(zeros)
sum(apply(assay(tab),1,function(x)all(x==0)))
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
sum(zeros)
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
kk
class(kk)
?scanBam
mm
bf
tab[5]
rowRanges(tab)[5]
rowRanges(tab)[51]
rowRanges(tab)[52]
rowRanges(tab)[5]
mm
sum(apply(assay(tab)[5],1,function(x)sum(x)))
assay(tab[5])
kk
str(kk)
mean(kk$mapq)
kk$mapq
kk[[1]]$mapq
sum(assay(tab[5])
)
mean(kk[[1]]$mapq)
mm = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf[1], param=mm)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
assay(tab[30])
kk30[[1]]$mapq
kk30[1]$mapq
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
sum(assay(tab[5]))
mean(kk[[1]]$mapq)
kk
kk30
kk30[1]
kk30[2]
kk30[1][1]
kk30[1][2]
kk30[2][1]
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
bf[1]
assays(tab[5])
assay(tab[5])
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
assay(tab[5])[1]
mean(kk[[1]]$mapq)
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
assay(tab[30])[1]
mean(kk30[[1]]$mapq)
kk30
kk
countBam(bf[1], param=mm)
countBam(bf[1], param=mm30)
library(geuvPack)
library(VariantAnnotation)
gtpath
biocLite("geuvPack")
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
```
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
library(ph525x)
b1 = benchOOM()
library(BiocInstaller)
biocLite("rhdf5")
library(ph525x)
b1 = benchOOM()
biocLite("bigmemory")
library(ph525x)
library(rhdf5)
library(bigmemory)
b1 = benchOOM()
b1
b1
b1$wr
b1$meth[which.min(b1$wr)]
h22 = scanVcfHeader(gtpath(22))
h22
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
mean( h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4)))
h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4))
h5read("ex_hdf5file.h5", "x")
h22 = scanVcfHeader(gtpath(22))
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
help.start()
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
juxta = function (chrname="chr22", ...)
{
require(ERBS)
data(HepG2)
data(GM12878)
require(ggbio)
require(GenomicRanges)  # "subset" is overused, need import detail
ap1 = autoplot(GenomicRanges::subset(HepG2, seqnames==chrname))
ap2 = autoplot(GenomicRanges::subset(GM12878, seqnames==chrname))
tracks(HepG2 = ap1, Bcell = ap2, ...)
# alternative code for Gviz below
#    require(Gviz)
#    ap1 = AnnotationTrack(GenomicRanges::subset(HepG2, seqnames==chrname))
#    names(ap1) = "HepG2"
#    ap2 = AnnotationTrack(GenomicRanges::subset(GM12878, seqnames==chrname))
#    names(ap2) = "B-cell"
#    ax = GenomeAxisTrack()
#    plotTracks(list(ax, ap1, ap2))
}
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
library(ERBS)
juxta("chr2", main="ESRRA binding peaks on chr2")
?package.skeleton
package.skeleton("erbsViz",list=juxta")
package.skeleton("erbsViz",list="juxta")
package.skeleton("erbsViz",list="juxta")
getwd()
package.skeleton("erbsViz",list="juxta")
install.packages("erbsViz", repos=NULL, type="source")
install.packages("erbsViz", repos=NULL, type="source")
library(erbsViz)
jdemo = juxta()
class(jdemo)
class(jdemo)
getSlots(getClass(class(jdemo)))
getSlots(getClass("Tracks"))
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
?makeOrganismPackage
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(org.Ce.eg.db)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
# gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
gd
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
library(org.Sc.sgd.db)
biocLite(org.Sc.sgd.db)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("org.Ce.eg.db")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(BiocInstaller)
biocLite("TxDb.Celegans.UCSC.ce6.ensGene")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(Cen.ele6)
sum(seqlengths(Cen.ele6))
R CMD check erbsViz
setwd("~/")
setwd("C:/Users/Mike/Rspace/MITxGWS")
HCO2=0.034
pCO2=400e-6
MA=5.14e18 # kg
mbar=0.029 # kg/mol
px=400e-6 # partial pressure of X : 400 ppm is X is CO2
pa = 1 # 1 atm
VO=1.4e21 # volume of ocean / m3
MOMA=HCO2*pCO2*VO*mbar*(pa/px)*(1/MA)
MOMA
HC=0.034
pC=400e-6
CO2=HC*pC
CO2
HC=0.034
pC=400e-6
MA=5.14e18 # kg
mbar=0.029 # kg/mol
px=400e-6 # partial pressure of X : 400 ppm is X is CO2
pa = 1 # 1 atm
VO=1.4e21 # volume of ocean / m3
MCOMCA=HC*pC*VO*mbar*(pa/px)*(1/MA)
MCOMCA
K1=4.3e-7
K2=4.7e-11
H=6.3E-9
HCNEW=HC*(1+K1/H+K1*K2/H^2)
DIC=HCNEW*pC
MCOMCA_NEW=HCNEW*pC*VO*mbar*(pa/px)*(1/MA)
MCOMCA_NEW
HCNEW
#10e-8.2
10e-8.2
10^(-8,2)
10^(-8.2)
HC_PRIME8.2=HC*(1+K1/H+K1*K2/H^2)
K1=4.3e-7
K2=4.7e-11
H=6.3E-9
HC_PRIME=function(H,K1,K2){
HC*(1+K1/H+K1*K2/H^2)
}
HC_PRIME(H,K1,K2)
DIC=HC_PRIME(H,K1,K2)*pC
MCOMCA_PRIME=HC_PRIME(H,K1,K2)*pC*VO*mbar*(pa/px)*(1/MA)
MCOMCA_PRIME
K1=4.3e-7
K2=4.7e-11
pH=8.2
HC_PRIME=function(pH,K1,K2,HC){
H=10^{-pH}
HC*(1+K1/H+K1*K2/H^2)
}
HC_PRIME(pH,K1,K2,HC)
DIC=HC_PRIME(pH,K1,K2,HC)*pC
MCOMCA_PRIME=HC_PRIME(pH,K1,K2,HC)*pC*VO*mbar*(pa/px)*(1/MA)
MCOMCA_PRIME
HC_PRIME8.2=HC_PRIME(8.2,K1,K2,HC)
HC_PRIME8.2
HC_PRIME7=HC_PRIME(7,K1,K2,HC)
HC_PRIME7
MCOMCA_PRIME7=HC_PRIME(7,K1,K2,HC)*pC*VO*mbar*(pa/px)*(1/MA)
MCOMCA_PRIME7
HC<-function(T,Tref,HCref){
HCref*exp(-8.053*(1-Tref/T))
}
HC(298,298,0.034)
Tref=298
HCref=0.034
HC<-function(T,Tref,HCref){
HCref*exp(-8.053*(1-Tref/T))
}
HC(298,Tref,HCref)
HC(275,Tref,HCref)
HC/Href
HC/HCref
HC(275,Tref,HCref)/HCref
TmT0=function(lambda,C,C0,S,S0,alpha){
(1/lambda)*(5.37*log(C/C0)+(1-alpha*S0)/4 * (S/S0-1))
}
lambda=1.5
C0=400
C=C0
S0=1360
S=0.85*S0
alpha=0.3
TmT0(lambda,C,C0,S,S0,alpha)
TmT0=function(lambda,C,C0,S,S0,alpha){
(1/lambda)*(5.37*log(C/C0)+((1-alpha*S0)/4) * (S/S0-1))
}
lambda=1.5
C0=400
C=C0
S0=1360
S=0.85*S0
alpha=0.3
TmT0(lambda,C,C0,S,S0,alpha)
(S/S0-1)
1-alpha*S0)/4
(1-alpha*S0)/4
((1-alpha*S0)/4) * (S/S0-1)
.7*1360/4
TmT0=function(lambda,C,C0,S,S0,alpha){
(1/lambda)*(5.37*log(C/C0)+((1-alpha)*S0/4) * (S/S0-1))
}
lambda=1.5
C0=400
C=C0
S0=1360
S=0.85*S0
alpha=0.3
TmT0(lambda,C,C0,S,S0,alpha)
# Carbon ration C/C_0 required to maintain constant temperature
Cratio=function(S,S0,alpha){
exp((1/5.370*((1-alpha)*S0/4) * (S/S0-1)))
}
S0=1360
S=0.85*S
alpha=0.3
Cratio(S,S0,alpha)
# Carbon ration C/C_0 required to maintain constant temperature
Cratio=function(S,S0,alpha){
exp((1/5.370*((1-alpha)*S0/4) * (S/S0-1)))
}
S0=1360
S=0.85*S0
alpha=0.3
Cratio(S,S0,alpha)
((1-alpha)*S0/4)
# Carbon ration C/C_0 required to maintain constant temperature
Cratio=function(S,S0,alpha){
exp((1/5.370)*((1-alpha)*S0/4) * (S/S0-1))
}
S0=1360
S=0.85*S0
alpha=0.3
Cratio(S,S0,alpha)
((1-alpha)*S0/4) * (S/S0-1)
(1/5.370)*((1-alpha)*S0/4) * (S/S0-1)
# Carbon ration C/C_0 required to maintain constant temperature
Cratio=function(S,S0,alpha){
exp((-1/5.370)*((1-alpha)*S0/4) * (S/S0-1))
}
S0=1360
S=0.85*S0
alpha=0.3
Cratio(S,S0,alpha)
(-1/5.370)*((1-alpha)*S0/4) * (S/S0-1)
S0=1360
S=0.85*S
exp(-11.6*(S/S0-1))^(1/0.56)
(S/S0-1)
S0=1360
S=0.85*S0
exp(-11.6*(S/S0-1))^(1/0.56)
(S/S0-1)
-11.6*(S/S0-1)
S0=1360
S=0.85*S0
(1/exp(11.6*(S/S0-1)))^(1/0.56)
lambda=1.5
C0=400
C=C0
S0=1360
S=0.85*S0
alpha=0.3
TmT0(lambda,C,C0,S,S0,alpha)
C=(1/exp(11.6*(S/S0-1)))^(1/0.56)*C0
TmT0(lambda,C,C0,S,S0,alpha)
